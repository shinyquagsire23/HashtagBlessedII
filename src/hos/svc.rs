/*
 * Copyright (c) 2015-2021, SALT.
 * This file is part of HashtagBlessedII and is distributed under the 3-clause BSD license.
 * See LICENSE.md for terms of use.
 */

use core::mem;

use alloc::boxed::Box;
use async_trait::async_trait;

use core::future::Future;

#[async_trait]
pub trait SvcHandler {
    async fn handle(&self, pre_ctx: [u64; 32]) -> [u64; 32];
}

include!(concat!(env!("OUT_DIR"), "/svc_gen.rs"));

pub enum HorizonSvc {
    Invalid(SvcInvalid),
    SetHeapSize(SvcDefaultHandler),
    SetMemoryPermission(SvcDefaultHandler),
    SetMemoryAttribute(SvcDefaultHandler),
    MapMemory(SvcDefaultHandler),
    UnmapMemory(SvcDefaultHandler),
    QueryMemory(SvcQueryMemory),
    ExitProcess(SvcDefaultHandler),
    CreateThread(SvcDefaultHandler),
    StartThread(SvcDefaultHandler),
    ExitThread(SvcDefaultHandler),
    SleepThread(SvcDefaultHandler),
    GetThreadPriority(SvcDefaultHandler),
    SetThreadPriority(SvcDefaultHandler),
    GetThreadCoreMask(SvcDefaultHandler),
    SetThreadCoreMask(SvcDefaultHandler),
    GetCurrentProcessorNumber(SvcDefaultHandler),
    SignalEvent(SvcDefaultHandler),
    ClearEvent(SvcDefaultHandler),
    MapSharedMemory(SvcDefaultHandler),
    UnmapSharedMemory(SvcDefaultHandler),
    CreateTransferMemory(SvcDefaultHandler),
    CloseHandle(SvcDefaultHandler),
    ResetSignal(SvcDefaultHandler),
    WaitSynchronization(SvcDefaultHandler),
    CancelSynchronization(SvcDefaultHandler),
    ArbitrateLock(SvcDefaultHandler),
    ArbitrateUnlock(SvcDefaultHandler),
    WaitProcessWideKeyAtomic(SvcDefaultHandler),
    SignalProcessWideKey(SvcDefaultHandler),
    GetSystemTick(SvcDefaultHandler),
    ConnectToNamedPort(SvcConnectToNamedPort),
    SendSyncRequestLight(SvcDefaultHandler),
    SendSyncRequest(SvcDefaultHandler),
    SendSyncRequestWithUserBuffer(SvcDefaultHandler),
    SendAsyncRequestWithUserBuffer(SvcDefaultHandler),
    GetProcessId(SvcDefaultHandler),
    GetThreadId(SvcDefaultHandler),
    Break(SvcBreak),
    OutputDebugString(SvcDefaultHandler),
    ReturnFromException(SvcDefaultHandler),
    GetInfo(SvcDefaultHandler),
    FlushEntireDataCache(SvcDefaultHandler),
    FlushDataCache(SvcDefaultHandler),
    MapPhysicalMemory(SvcDefaultHandler), // 3.0.0+
    UnmapPhysicalMemory(SvcDefaultHandler), // 3.0.0+
    //GetFutureThreadInfo(SvcDefaultHandler), // 5.0.0-5.1.0
    GetDebugFutureThreadInfo(SvcDefaultHandler), // 6.0.0+
    GetLastThreadInfo(SvcDefaultHandler),
    GetResourceLimitLimitValue(SvcDefaultHandler),
    GetResourceLimitCurrentValue(SvcDefaultHandler),
    SetThreadActivity(SvcDefaultHandler),
    GetThreadContext3(SvcDefaultHandler),
    WaitForAddress(SvcDefaultHandler), // 4.0.0+
    SignalToAddress(SvcDefaultHandler), // 4.0.0+
    SynchronizePreemptionState(SvcDefaultHandler), // 8.0.0+
    GetResourceLimitPeakValue(SvcDefaultHandler), // 11.0.0+
    //DumpInfo(SvcDefaultHandler), // 1.0.0-3.0.2
    KernelDebug(SvcDefaultHandler), // 4.0.0+
    ChangeKernelTraceState(SvcDefaultHandler), // 4.0.0+
    CreateSession(SvcDefaultHandler),
    AcceptSession(SvcDefaultHandler),
    ReplyAndReceiveLight(SvcDefaultHandler),
    ReplyAndReceive(SvcDefaultHandler),
    ReplyAndReceiveWithUserBuffer(SvcDefaultHandler),
    CreateEvent(SvcDefaultHandler),
    MapPhysicalMemoryUnsafe(SvcDefaultHandler), // 5.0.0+
    UnmapPhysicalMemoryUnsafe(SvcDefaultHandler), // 5.0.0+
    SetUnsafeLimit(SvcDefaultHandler), // 5.0.0+
    CreateCodeMemory(SvcDefaultHandler), // 4.0.0+
    ControlCodeMemory(SvcDefaultHandler), // 4.0.0+
    SleepSystem(SvcDefaultHandler),
    ReadWriteRegister(SvcDefaultHandler),
    SetProcessActivity(SvcDefaultHandler),
    CreateSharedMemory(SvcDefaultHandler),
    MapTransferMemory(SvcDefaultHandler),
    UnmapTransferMemory(SvcDefaultHandler),
    CreateInterruptEvent(SvcDefaultHandler),
    QueryPhysicalAddress(SvcDefaultHandler),
    QueryIoMapping(SvcDefaultHandler),
    CreateDeviceAddressSpace(SvcDefaultHandler),
    AttachDeviceAddressSpace(SvcDefaultHandler),
    DetachDeviceAddressSpace(SvcDefaultHandler),
    MapDeviceAddressSpaceByForce(SvcDefaultHandler),
    MapDeviceAddressSpaceAligned(SvcDefaultHandler),
    MapDeviceAddressSpace(SvcDefaultHandler),
    UnmapDeviceAddressSpace(SvcDefaultHandler),
    InvalidateProcessDataCache(SvcDefaultHandler),
    StoreProcessDataCache(SvcDefaultHandler),
    FlushProcessDataCache(SvcDefaultHandler),
    DebugActiveProcess(SvcDefaultHandler),
    BreakDebugProcess(SvcDefaultHandler),
    TerminateDebugProcess(SvcDefaultHandler),
    GetDebugEvent(SvcDefaultHandler),
    ContinueDebugEvent(SvcDefaultHandler),
    GetProcessList(SvcDefaultHandler),
    GetThreadList(SvcDefaultHandler),
    GetDebugThreadContext(SvcDefaultHandler),
    SetDebugThreadContext(SvcDefaultHandler),
    QueryDebugProcessMemory(SvcDefaultHandler),
    ReadDebugProcessMemory(SvcDefaultHandler),
    WriteDebugProcessMemory(SvcDefaultHandler),
    SetHardwareBreakPoint(SvcDefaultHandler),
    GetDebugThreadParam(SvcDefaultHandler),
    GetSystemInfo(SvcDefaultHandler), // 5.0.0+
    CreatePort(SvcDefaultHandler),
    ManageNamedPort(SvcDefaultHandler),
    ConnectToPort(SvcDefaultHandler),
    SetProcessMemoryPermission(SvcDefaultHandler),
    MapProcessMemory(SvcDefaultHandler),
    UnmapProcessMemory(SvcDefaultHandler),
    QueryProcessMemory(SvcDefaultHandler),
    MapProcessCodeMemory(SvcDefaultHandler),
    UnmapProcessCodeMemory(SvcDefaultHandler),
    CreateProcess(SvcCreateProcess),
    StartProcess(SvcDefaultHandler),
    TerminateProcess(SvcDefaultHandler),
    GetProcessInfo(SvcDefaultHandler),
    CreateResourceLimit(SvcDefaultHandler),
    SetResourceLimitLimitValue(SvcDefaultHandler),
    CallSecureMonitor(SvcDefaultHandler),
}

impl HorizonSvc
{
    pub fn from_iss(iss: u32) -> HorizonSvc {
        let svc_u8 = (iss & 0xFF) as u8;
        match svc_u8 {
            0x01 => HorizonSvc::SetHeapSize(SvcDefaultHandler),
            0x02 => HorizonSvc::SetMemoryPermission(SvcDefaultHandler),
            0x03 => HorizonSvc::SetMemoryAttribute(SvcDefaultHandler),
            0x04 => HorizonSvc::MapMemory(SvcDefaultHandler),
            0x05 => HorizonSvc::UnmapMemory(SvcDefaultHandler),
            0x06 => HorizonSvc::QueryMemory(SvcQueryMemory),
            0x07 => HorizonSvc::ExitProcess(SvcDefaultHandler),
            0x08 => HorizonSvc::CreateThread(SvcDefaultHandler),
            0x09 => HorizonSvc::StartThread(SvcDefaultHandler),
            0x0A => HorizonSvc::ExitThread(SvcDefaultHandler),
            0x0B => HorizonSvc::SleepThread(SvcDefaultHandler),
            0x0C => HorizonSvc::GetThreadPriority(SvcDefaultHandler),
            0x0D => HorizonSvc::SetThreadPriority(SvcDefaultHandler),
            0x0E => HorizonSvc::GetThreadCoreMask(SvcDefaultHandler),
            0x0F => HorizonSvc::SetThreadCoreMask(SvcDefaultHandler),
            0x10 => HorizonSvc::GetCurrentProcessorNumber(SvcDefaultHandler),
            0x11 => HorizonSvc::SignalEvent(SvcDefaultHandler),
            0x12 => HorizonSvc::ClearEvent(SvcDefaultHandler),
            0x13 => HorizonSvc::MapSharedMemory(SvcDefaultHandler),
            0x14 => HorizonSvc::UnmapSharedMemory(SvcDefaultHandler),
            0x15 => HorizonSvc::CreateTransferMemory(SvcDefaultHandler),
            0x16 => HorizonSvc::CloseHandle(SvcDefaultHandler),
            0x17 => HorizonSvc::ResetSignal(SvcDefaultHandler),
            0x18 => HorizonSvc::WaitSynchronization(SvcDefaultHandler),
            0x19 => HorizonSvc::CancelSynchronization(SvcDefaultHandler),
            0x1A => HorizonSvc::ArbitrateLock(SvcDefaultHandler),
            0x1B => HorizonSvc::ArbitrateUnlock(SvcDefaultHandler),
            0x1C => HorizonSvc::WaitProcessWideKeyAtomic(SvcDefaultHandler),
            0x1D => HorizonSvc::SignalProcessWideKey(SvcDefaultHandler),
            0x1E => HorizonSvc::GetSystemTick(SvcDefaultHandler),
            0x1F => HorizonSvc::ConnectToNamedPort(SvcConnectToNamedPort),
            0x20 => HorizonSvc::SendSyncRequestLight(SvcDefaultHandler),
            0x21 => HorizonSvc::SendSyncRequest(SvcDefaultHandler),
            0x22 => HorizonSvc::SendSyncRequestWithUserBuffer(SvcDefaultHandler),
            0x23 => HorizonSvc::SendAsyncRequestWithUserBuffer(SvcDefaultHandler),
            0x24 => HorizonSvc::GetProcessId(SvcDefaultHandler),
            0x25 => HorizonSvc::GetThreadId(SvcDefaultHandler),
            0x26 => HorizonSvc::Break(SvcBreak),
            0x27 => HorizonSvc::OutputDebugString(SvcDefaultHandler),
            0x28 => HorizonSvc::ReturnFromException(SvcDefaultHandler),
            0x29 => HorizonSvc::GetInfo(SvcDefaultHandler),
            0x2A => HorizonSvc::FlushEntireDataCache(SvcDefaultHandler),
            0x2B => HorizonSvc::FlushDataCache(SvcDefaultHandler),
            0x2C => HorizonSvc::MapPhysicalMemory(SvcDefaultHandler),
            0x2D => HorizonSvc::UnmapPhysicalMemory(SvcDefaultHandler),
            //0x2E => HorizonSvc::GetFutureThreadInfo(SvcDefaultHandler),
            0x2E => HorizonSvc::GetDebugFutureThreadInfo(SvcDefaultHandler),
            0x2F => HorizonSvc::GetLastThreadInfo(SvcDefaultHandler),
            0x30 => HorizonSvc::GetResourceLimitLimitValue(SvcDefaultHandler),
            0x31 => HorizonSvc::GetResourceLimitCurrentValue(SvcDefaultHandler),
            0x32 => HorizonSvc::SetThreadActivity(SvcDefaultHandler),
            0x33 => HorizonSvc::GetThreadContext3(SvcDefaultHandler),
            0x34 => HorizonSvc::WaitForAddress(SvcDefaultHandler),
            0x35 => HorizonSvc::SignalToAddress(SvcDefaultHandler),
            0x36 => HorizonSvc::SynchronizePreemptionState(SvcDefaultHandler),
            0x37 => HorizonSvc::GetResourceLimitPeakValue(SvcDefaultHandler),
            //0x3C => HorizonSvc::DumpInfo(SvcDefaultHandler),
            0x3C => HorizonSvc::KernelDebug(SvcDefaultHandler),
            0x3D => HorizonSvc::ChangeKernelTraceState(SvcDefaultHandler),
            0x40 => HorizonSvc::CreateSession(SvcDefaultHandler),
            0x41 => HorizonSvc::AcceptSession(SvcDefaultHandler),
            0x42 => HorizonSvc::ReplyAndReceiveLight(SvcDefaultHandler),
            0x43 => HorizonSvc::ReplyAndReceive(SvcDefaultHandler),
            0x44 => HorizonSvc::ReplyAndReceiveWithUserBuffer(SvcDefaultHandler),
            0x45 => HorizonSvc::CreateEvent(SvcDefaultHandler),
            0x48 => HorizonSvc::MapPhysicalMemoryUnsafe(SvcDefaultHandler),
            0x49 => HorizonSvc::UnmapPhysicalMemoryUnsafe(SvcDefaultHandler),
            0x4A => HorizonSvc::SetUnsafeLimit(SvcDefaultHandler),
            0x4B => HorizonSvc::CreateCodeMemory(SvcDefaultHandler),
            0x4C => HorizonSvc::ControlCodeMemory(SvcDefaultHandler),
            0x4D => HorizonSvc::SleepSystem(SvcDefaultHandler),
            0x4E => HorizonSvc::ReadWriteRegister(SvcDefaultHandler),
            0x4F => HorizonSvc::SetProcessActivity(SvcDefaultHandler),
            0x50 => HorizonSvc::CreateSharedMemory(SvcDefaultHandler),
            0x51 => HorizonSvc::MapTransferMemory(SvcDefaultHandler),
            0x52 => HorizonSvc::UnmapTransferMemory(SvcDefaultHandler),
            0x53 => HorizonSvc::CreateInterruptEvent(SvcDefaultHandler),
            0x54 => HorizonSvc::QueryPhysicalAddress(SvcDefaultHandler),
            0x55 => HorizonSvc::QueryIoMapping(SvcDefaultHandler),
            0x56 => HorizonSvc::CreateDeviceAddressSpace(SvcDefaultHandler),
            0x57 => HorizonSvc::AttachDeviceAddressSpace(SvcDefaultHandler),
            0x58 => HorizonSvc::DetachDeviceAddressSpace(SvcDefaultHandler),
            0x59 => HorizonSvc::MapDeviceAddressSpaceByForce(SvcDefaultHandler),
            0x5A => HorizonSvc::MapDeviceAddressSpaceAligned(SvcDefaultHandler),
            0x5B => HorizonSvc::MapDeviceAddressSpace(SvcDefaultHandler),
            0x5C => HorizonSvc::UnmapDeviceAddressSpace(SvcDefaultHandler),
            0x5D => HorizonSvc::InvalidateProcessDataCache(SvcDefaultHandler),
            0x5E => HorizonSvc::StoreProcessDataCache(SvcDefaultHandler),
            0x5F => HorizonSvc::FlushProcessDataCache(SvcDefaultHandler),
            0x60 => HorizonSvc::DebugActiveProcess(SvcDefaultHandler),
            0x61 => HorizonSvc::BreakDebugProcess(SvcDefaultHandler),
            0x62 => HorizonSvc::TerminateDebugProcess(SvcDefaultHandler),
            0x63 => HorizonSvc::GetDebugEvent(SvcDefaultHandler),
            0x64 => HorizonSvc::ContinueDebugEvent(SvcDefaultHandler),
            0x65 => HorizonSvc::GetProcessList(SvcDefaultHandler),
            0x66 => HorizonSvc::GetThreadList(SvcDefaultHandler),
            0x67 => HorizonSvc::GetDebugThreadContext(SvcDefaultHandler),
            0x68 => HorizonSvc::SetDebugThreadContext(SvcDefaultHandler),
            0x69 => HorizonSvc::QueryDebugProcessMemory(SvcDefaultHandler),
            0x6A => HorizonSvc::ReadDebugProcessMemory(SvcDefaultHandler),
            0x6B => HorizonSvc::WriteDebugProcessMemory(SvcDefaultHandler),
            0x6C => HorizonSvc::SetHardwareBreakPoint(SvcDefaultHandler),
            0x6D => HorizonSvc::GetDebugThreadParam(SvcDefaultHandler),
            0x6F => HorizonSvc::GetSystemInfo(SvcDefaultHandler),
            0x70 => HorizonSvc::CreatePort(SvcDefaultHandler),
            0x71 => HorizonSvc::ManageNamedPort(SvcDefaultHandler),
            0x72 => HorizonSvc::ConnectToPort(SvcDefaultHandler),
            0x73 => HorizonSvc::SetProcessMemoryPermission(SvcDefaultHandler),
            0x74 => HorizonSvc::MapProcessMemory(SvcDefaultHandler),
            0x75 => HorizonSvc::UnmapProcessMemory(SvcDefaultHandler),
            0x76 => HorizonSvc::QueryProcessMemory(SvcDefaultHandler),
            0x77 => HorizonSvc::MapProcessCodeMemory(SvcDefaultHandler),
            0x78 => HorizonSvc::UnmapProcessCodeMemory(SvcDefaultHandler),
            0x79 => HorizonSvc::CreateProcess(SvcCreateProcess),
            0x7A => HorizonSvc::StartProcess(SvcDefaultHandler),
            0x7B => HorizonSvc::TerminateProcess(SvcDefaultHandler),
            0x7C => HorizonSvc::GetProcessInfo(SvcDefaultHandler),
            0x7D => HorizonSvc::CreateResourceLimit(SvcDefaultHandler),
            0x7E => HorizonSvc::SetResourceLimitLimitValue(SvcDefaultHandler),
            0x7F => HorizonSvc::CallSecureMonitor(SvcDefaultHandler),
            _  =>  HorizonSvc::Invalid(SvcInvalid),
        }
    }
}
